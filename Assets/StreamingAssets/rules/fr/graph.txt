# Check for infinitive
# General rule format: pattern -> action
r1(x,y) r2(y,z);[r1=obj|pur,r2=agt,'x=V,'y=V] -> error # He wanted to go -- go cannot have agent
r1(x,y) !r2(y,z);[r1=obj|pur,r2=agt,'x=V,'y=V,y.@quote] -> pass # He told him, "Sleep" -- Sleep does not have agent, but is not infinitive
r1(x,y) !r2(y,z);[r1=obj|pur|rsn|cnt,r2=agt,'x=V,'y=V,!'x.@mark_inf_none,!'x.@mark_inf_gerund] -> y.@infinitive
r1(x,y) !r2(y,z);[r1=obj|pur|rsn|cnt,r2=agt,'x=V,'y=V,'x.@mark_inf_none] -> y.@infinitiven
r1(x,y) !r2(y,z);[r1=obj|pur|rsn|cnt,r2=agt,'x=V,'y=V,'x.@mark_inf_gerund] -> y.@infinitiveg
#r(x,y);[r=agt,'x=V,'y=N] -> y<x.@masculine,y<x.@feminine|@pl|@singular|@1|@2|@3
#
# Handling quantities
#
r(x,y);[r=qua,'x=N] -> x.@pl,!x.@singular # By default, plural if quantity is specified
r1(x,y);[r1=qua,'x=N,'y=Num,'y='1] -> x.@singular,!x.@pl,x.@generic,!x.@ddef # If qua==1, singular
r1(x,y);[r1=qua,'x=V] -> y.@times_pl
r1(x,y);[r1=qua,'x=V,'y=Num,'y='1] -> !y.@times_pl,y.@times_si
#
#
# Handling agreement
#
r(x,y);[r=agt,'x=V,'y=N] -> x<y.@male|@female|@pl|@singular|@1|@2|@3|@honorific|@nonhonorific
